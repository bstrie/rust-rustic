#!/usr/bin/env python3

import json
import os
import re
import readline
import subprocess
import sys
import urllib.request

# sys.path[0] has a special meaning, so stick our search paths after it
sys.path = sys.path[:1] + ['./', '../'] + sys.path[1:]

# Now set up colorama, accounting for cargo installation limitations.
# If you don't want the colorama files cluttering up your build directory,
# erase the following files:
# ansi.py initialise.py win32.py ansitowin32.py __init__.py winterm.py
try:
    try:
        from build import init, Fore, Style
    except ImportError:
        from bin import init, Fore, Style
    init()
    term_cyan = Fore.CYAN + Style.BRIGHT
    term_green = Fore.GREEN + Style.BRIGHT
    term_magenta = Fore.MAGENTA + Style.BRIGHT
    term_yellow = Fore.YELLOW + Style.BRIGHT
    term_red = Fore.RED + Style.BRIGHT
    term_reset = Fore.RESET + Style.RESET_ALL
except:  # If anything at all is wrong with colorama, just disable all colors
    print('[Warning]\nTerminal colors unavailable, apparently\n')
    term_cyan = term_green = term_magenta = term_yellow = term_red = term_reset = ''

scratch_name = '.rustic.scratch'
exe_suffix = ('' if os.name != 'nt' else '.exe')
exe_name = scratch_name + exe_suffix
file_name = scratch_name + '.rs'
# Some commands (use and import) prefer to be outside of main, hence head
valid_head = default_head = 'use std;\n'
valid_body = default_body = 'fn main() {\n'
indent = '    '
transient_header = indent + '// Transient:\n'
default_transient = ''
show_comp_msg = False  # Mostly just compiler warnings

def print_help():
    print('''Commands:
  %clear to reset the evaluation environment (equivalent to ^D)
  %exit to leave the interpreter (equivalent to ^C)
  %scratch to print your most recent scratch file
  %compmsg to enable/disable compiler messages (disabled by default)
  %putgist to upload your most recent scratch file and output to Gist
''')

def print_scratch():
    try:
        with open(file_name) as f:
            print(f.read() + '\n')
    except IOError:
        print('\n')

def toggle_comp_msg(show_comp_msg):
    show_comp_msg = not show_comp_msg
    if show_comp_msg:
        print('Compiler messages enabled\n')
    else:
        print('Compiler messages disabled\n')
    return show_comp_msg

def put_gist(output, comp_ver):
    try:
        with open(file_name) as f:
            # Also prepend the compiler info for ease of debuggings
            scratch = '/*\n' + comp_ver + '*/\n' + f.read()
    except IOError:
        print('No scratch file found\n')
    else:
        gist_data = {'description': 'Rustic REPL scratch file',
                     'public': True,
                     'files': {'.rustic.scratch.rs': {'content': scratch}}}
        if output != '': gist_data['files']['output'] = {'content': output}
        gist_data = json.dumps(gist_data).encode('u8')

        # Existence of a data parameter automatically turns this into a POST
        req = urllib.request.Request(url='https://api.github.com/gists',
                                     data=gist_data)
        res = urllib.request.urlopen(req)
        res = json.loads(res.read().decode('u8'))
        print('Scratch file pasted to ' + res['html_url'] + '\n')

# This is where it all begins
comp_ver = subprocess.check_output(('rustc', '-v'), \
                                   stderr=subprocess.STDOUT).decode('u8') 
print(term_cyan + '[Compiler info]' + term_reset + '\n' + comp_ver + '\n' + \
term_cyan + '[Rustic]' + term_reset + '''
Blank line to eval, ^D or %clear to clear environment, ?expr to log expr,
^C or %exit to quit, %putgist to paste to Gist, %help for a list of commands.
For documentation and examples, see https://github.com/bstrie/rust-rustic\n''')

try:
    while True:  # Breaks on ^C
        print(term_green + '[Input]' + term_reset)
        new_head = new_body = ''
        transient = default_transient
        persist_transient = False

        while True:  # Breaks on blank lines and EOF
            try:
                line = input()
                if line == '%clear': raise EOFError
                elif line == '%exit': raise KeyboardInterrupt
            except EOFError:
                valid_head = default_head
                valid_body = default_body
                print('\n' + term_magenta + '[Magic]' + term_reset + \
                      '\nEnvironment reset\n')
                break

            if re.match('\?', line):  # Transient/inspect
                if line == '?':
                    persist_transient = True
                else:
                    transient += indent + 'log(error, ' + line[1:] + ');\n'
            elif re.match('%', line):  # Magic
                print('\n' + term_magenta + '[Magic]' + term_reset)
                if line == '%help':
                    print_help()
                elif line == '%scratch':
                    print_scratch()
                elif line == '%compmsg':
                    show_comp_msg = toggle_comp_msg(show_comp_msg)
                elif line == '%putgist':
                    put_gist(output, comp_ver)
                else:
                    print('Unrecognized magic word: ' + line + '\n')
                break
            elif line != '':  # Command
                if persist_transient:
                    transient += indent + line + '\n'
                elif re.match('use ', line) or re.match('import ', line):
                    new_head += line + '\n'
                else:
                    new_body += indent + line + '\n'
            else:  # Newline, let's evaluate
                if transient != default_transient:
                    transient = transient_header + transient 
                with open(file_name, 'w') as f:
                    f.write(valid_head + new_head + \
                            valid_body + new_body + transient + '}')
                try:  # To compile the file
                    comp_msg = subprocess.check_output(('rustc', file_name),
                                                       stderr=subprocess.STDOUT).decode('u8')
                    if show_comp_msg and comp_msg != '':
                        print(term_yellow + '[Compiler message]' + \
                              term_reset + '\n' + comp_msg)
                    try:  # To run the file
                        output = subprocess.check_output(('./' + exe_name),
                                                         stderr=subprocess.STDOUT).decode('u8')
                        if output != '': print(term_green + '[Output]' + \
                                               term_reset + '\n' + output)
                        valid_head += new_head
                        valid_body += new_body
                    except subprocess.CalledProcessError as e:
                        output = term_red + '[Runtime error]' + term_reset + \
                                 '\n' + e.output.decode('u8')
                        print(output)
                except subprocess.CalledProcessError as e:
                    output = term_red + '[Compiler error]' + term_reset + \
                             '\n' + e.output.decode('u8')
                    print(output)
                break

except KeyboardInterrupt:
    prompt = input('\n\n' + term_cyan + '[Exit]' + term_reset + \
                   '\nDelete scratch files? [y]/n: ')
    if prompt.lower() != 'n':
        if os.path.exists(file_name): os.remove(file_name)
        if os.path.exists(exe_name): os.remove(exe_name)
    sys.exit(0)

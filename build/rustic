#!/usr/bin/env python3

import json
import os
import re
import readline
import subprocess
import sys
import urllib.request

# sys.path[0] has a special meaning, so stick our search paths after it
sys.path = sys.path[:1] + ['./', '../'] + sys.path[1:]

# Now set up colorama, accounting for cargo installation limitations.
# If you don't want the colorama files cluttering up your build directory,
# erase the following files:
# ansi.py initialise.py win32.py ansitowin32.py __init__.py winterm.py
try:
    try:  # Was rustic installed via git?
        from build import init, Fore, Style
    except ImportError:  # Or maybe it was installed via cargo?
        from bin import init, Fore, Style
    init()
    TERM_CYAN = Fore.CYAN + Style.BRIGHT
    TERM_GREEN = Fore.GREEN + Style.BRIGHT
    TERM_MAGENTA = Fore.MAGENTA + Style.BRIGHT
    TERM_YELLOW = Fore.YELLOW + Style.BRIGHT
    TERM_RED = Fore.RED + Style.BRIGHT
    TERM_RESET = Fore.RESET + Style.RESET_ALL
except:  # If anything at all is wrong with colorama, just disable all colors
    print('[Warning]\nTerminal coloration unavailable\n')
    TERM_CYAN = TERM_GREEN = TERM_MAGENTA = TERM_YELLOW = TERM_RED = TERM_RESET = ''

SCRATCH_BASE = '.rustic.scratch'
EXE_SUFFIX = ('' if os.name != 'nt' else '.exe')
EXE_NAME = SCRATCH_BASE + EXE_SUFFIX
SCRATCH_NAME = SCRATCH_BASE + '.rs'
VALID_HEAD = DEFAULT_HEAD = ''  # Stick your frequently-linked crates in here
VALID_BODY = DEFAULT_BODY = 'fn main() {\n'
INDENT = '    '
TRANSIENT_HEADER = INDENT + '// Transient:\n'
DEFAULT_TRANSIENT = ''
SHOW_COMP_MSG = False  # Suppress compiler warnings by default

def reset_scratch():
    VALID_HEAD = DEFAULT_HEAD
    VALID_BODY = DEFAULT_BODY
    print('\n' + TERM_MAGENTA + '[Magic]' + TERM_RESET + \
          '\nEnvironment reset\n')

def print_help():
    print('''Commands:
  %clear to reset the evaluation environment (equivalent to ^D)
  %exit to leave the interpreter (equivalent to ^C)
  %scratch to print your most recent scratch file
  %compmsg to enable/disable compiler messages (disabled by default)
  %putgist to upload your most recent scratch file and output to Gist
''')

def print_scratch():
    try:
        with open(SCRATCH_NAME) as scratch_file:
            print(scratch_file.read() + '\n')
    except IOError:
        print('\n')

def toggle_comp_msg():
    SHOW_COMP_MSG = not SHOW_COMP_MSG
    if SHOW_COMP_MSG:
        print('Compiler messages enabled\n')
    else:
        print('Compiler messages disabled\n')

def put_gist(output, comp_ver):
    try:
        with open(SCRATCH_NAME) as scratch_file:
            # Prepend current compiler info to assist debugging
            scratch = '/*\n' + comp_ver + '*/\n' + scratch_file.read()
    except IOError:
        print('No scratch file found\n')
    else:
        # http://developer.github.com/v3/gists/
        gist_data = {'description': 'Rustic REPL scratch file',
                     'public': True,
                     'files': {'.rustic.scratch.rs': {'content': scratch}}}
        if output != '': gist_data['files']['output'] = {'content': output}
        gist_data = json.dumps(gist_data).encode('u8')

        # Existence of a data parameter automatically turns this into a POST
        req = urllib.request.Request(url='https://api.github.com/gists',
                                     data=gist_data)
        res = urllib.request.urlopen(req)
        res = json.loads(res.read().decode('u8'))
        print('Scratch file pasted to ' + res['html_url'] + '\n')

# Finally, let's get this REPL started
comp_ver = subprocess.check_output(('rustc', '-v'), \
                                   stderr=subprocess.STDOUT).decode('u8')
print(TERM_CYAN + '[Compiler info]' + TERM_RESET + '\n' + comp_ver + '\n' + \
TERM_CYAN + '[Rustic]' + TERM_RESET + '''
Blank line to eval, ^D or %clear to clear environment, ?expr to log expr,
^C or %exit to quit, %putgist to paste to Gist, %help for a list of commands.
For documentation and examples, see https://github.com/bstrie/rust-rustic\n''')

try:
    while True:  # Breaks on ^C
        print(TERM_GREEN + '[Input]' + TERM_RESET)
        new_head = new_body = ''
        transient = DEFAULT_TRANSIENT
        persist_transient = False

        while True:  # Breaks on blank lines and EOF
            try:
                line = input()
                if line == '%clear': raise EOFError
                elif line == '%exit': raise KeyboardInterrupt
            except EOFError:
                reset_scratch()
                break

            if re.match('\?', line):  # Transient/inspect
                if line == '?':
                    persist_transient = True
                else:
                    transient += INDENT + 'log(error, ' + line[1:] + ');\n'
            elif re.match('%', line):  # Magic
                print('\n' + TERM_MAGENTA + '[Magic]' + TERM_RESET)
                if line == '%help':
                    print_help()
                elif line == '%scratch':
                    print_scratch()
                elif line == '%compmsg':
                    toggle_comp_msg()
                elif line == '%putgist':
                    put_gist(output, comp_ver)
                else:
                    print('Unrecognized magic word: ' + line + '\n')
                break
            elif line != '':  # Rust code
                if persist_transient:
                    transient += INDENT + line + '\n'
                elif re.match('use ', line) or re.match('import ', line):
                    new_head += line + '\n'
                else:
                    new_body += INDENT + line + '\n'
            else:  # Newline, let's evaluate
                if transient != DEFAULT_TRANSIENT:
                    transient = TRANSIENT_HEADER + transient
                with open(SCRATCH_NAME, 'w') as scratch_file:
                    scratch_file.write(VALID_HEAD + new_head + \
                                       VALID_BODY + new_body + transient + '}')
                try:  # Compile the file
                    comp_msg = subprocess.check_output(
                        ('rustc', SCRATCH_NAME),
                        stderr=subprocess.STDOUT).decode('u8')
                    if SHOW_COMP_MSG and comp_msg != '':
                        print(TERM_YELLOW + '[Compiler message]' + \
                              TERM_RESET + '\n' + comp_msg)
                    try:  # Run the file
                        output = subprocess.check_output(
                            ('./' + EXE_NAME),
                            stderr=subprocess.STDOUT).decode('u8')
                        if output != '': print(TERM_GREEN + '[Output]' + \
                                               TERM_RESET + '\n' + output)
                        VALID_HEAD += new_head
                        VALID_BODY += new_body
                    except subprocess.CalledProcessError as e:
                        output = TERM_RED + '[Runtime error]' + TERM_RESET + \
                                 '\n' + e.output.decode('u8')
                        print(output)
                except subprocess.CalledProcessError as e:
                    output = TERM_RED + '[Compiler error]' + TERM_RESET + \
                             '\n' + e.output.decode('u8')
                    print(output)
                break

except KeyboardInterrupt:
    prompt = input('\n\n' + TERM_CYAN + '[Exit]' + TERM_RESET + \
                   '\nDelete scratch files? [y]/n: ')
    if prompt.lower() != 'n':
        if os.path.exists(SCRATCH_NAME): os.remove(SCRATCH_NAME)
        if os.path.exists(EXE_NAME): os.remove(EXE_NAME)
    sys.exit(0)
